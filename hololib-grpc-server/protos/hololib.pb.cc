// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hololib.proto

#include "hololib.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace hololibgrpc {
template <typename>
PROTOBUF_CONSTEXPR HelloRequest::HelloRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HelloRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HelloRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HelloRequestDefaultTypeInternal() {}
  union {
    HelloRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HelloRequestDefaultTypeInternal _HelloRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR HelloReply::HelloReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HelloReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HelloReplyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HelloReplyDefaultTypeInternal() {}
  union {
    HelloReply _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HelloReplyDefaultTypeInternal _HelloReply_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR HologramRequest::HologramRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.meshdata_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.texturedata_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.shadingoption_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.textureoption_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.wavelengthoption_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.pixelsizeoption_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.numofpixelsoption_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.initialphaseoption_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.meshdatasize_)*/ 0u

  , /*decltype(_impl_.texturedatasize_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HologramRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HologramRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HologramRequestDefaultTypeInternal() {}
  union {
    HologramRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HologramRequestDefaultTypeInternal _HologramRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR HologramReply::HologramReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hologramdata_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.reconstdata_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.hologramdatasize_)*/ 0u

  , /*decltype(_impl_.reconstdatasize_)*/ 0u

  , /*decltype(_impl_.duration_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HologramReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HologramReplyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HologramReplyDefaultTypeInternal() {}
  union {
    HologramReply _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HologramReplyDefaultTypeInternal _HologramReply_default_instance_;
}  // namespace hololibgrpc
static ::_pb::Metadata file_level_metadata_hololib_2eproto[4];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_hololib_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_hololib_2eproto = nullptr;
const ::uint32_t TableStruct_hololib_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::hololibgrpc::HelloRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hololibgrpc::HelloRequest, _impl_.name_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::hololibgrpc::HelloReply, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hololibgrpc::HelloReply, _impl_.message_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::hololibgrpc::HologramRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hololibgrpc::HologramRequest, _impl_.meshdatasize_),
    PROTOBUF_FIELD_OFFSET(::hololibgrpc::HologramRequest, _impl_.meshdata_),
    PROTOBUF_FIELD_OFFSET(::hololibgrpc::HologramRequest, _impl_.texturedatasize_),
    PROTOBUF_FIELD_OFFSET(::hololibgrpc::HologramRequest, _impl_.texturedata_),
    PROTOBUF_FIELD_OFFSET(::hololibgrpc::HologramRequest, _impl_.shadingoption_),
    PROTOBUF_FIELD_OFFSET(::hololibgrpc::HologramRequest, _impl_.textureoption_),
    PROTOBUF_FIELD_OFFSET(::hololibgrpc::HologramRequest, _impl_.wavelengthoption_),
    PROTOBUF_FIELD_OFFSET(::hololibgrpc::HologramRequest, _impl_.pixelsizeoption_),
    PROTOBUF_FIELD_OFFSET(::hololibgrpc::HologramRequest, _impl_.numofpixelsoption_),
    PROTOBUF_FIELD_OFFSET(::hololibgrpc::HologramRequest, _impl_.initialphaseoption_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::hololibgrpc::HologramReply, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hololibgrpc::HologramReply, _impl_.hologramdatasize_),
    PROTOBUF_FIELD_OFFSET(::hololibgrpc::HologramReply, _impl_.hologramdata_),
    PROTOBUF_FIELD_OFFSET(::hololibgrpc::HologramReply, _impl_.reconstdatasize_),
    PROTOBUF_FIELD_OFFSET(::hololibgrpc::HologramReply, _impl_.reconstdata_),
    PROTOBUF_FIELD_OFFSET(::hololibgrpc::HologramReply, _impl_.duration_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::hololibgrpc::HelloRequest)},
        { 9, -1, -1, sizeof(::hololibgrpc::HelloReply)},
        { 18, -1, -1, sizeof(::hololibgrpc::HologramRequest)},
        { 36, -1, -1, sizeof(::hololibgrpc::HologramReply)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::hololibgrpc::_HelloRequest_default_instance_._instance,
    &::hololibgrpc::_HelloReply_default_instance_._instance,
    &::hololibgrpc::_HologramRequest_default_instance_._instance,
    &::hololibgrpc::_HologramReply_default_instance_._instance,
};
const char descriptor_table_protodef_hololib_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\rhololib.proto\022\013hololibgrpc\"\034\n\014HelloReq"
    "uest\022\014\n\004name\030\001 \001(\t\"\035\n\nHelloReply\022\017\n\007mess"
    "age\030\001 \001(\t\"\377\001\n\017HologramRequest\022\024\n\014meshDat"
    "aSize\030\001 \001(\r\022\020\n\010meshData\030\002 \001(\014\022\027\n\017texture"
    "DataSize\030\003 \001(\r\022\023\n\013textureData\030\004 \001(\014\022\025\n\rs"
    "hadingOption\030\005 \001(\t\022\025\n\rtextureOption\030\006 \001("
    "\t\022\030\n\020wavelengthOption\030\007 \001(\t\022\027\n\017pixelSize"
    "Option\030\010 \001(\t\022\031\n\021numOfPixelsOption\030\t \001(\t\022"
    "\032\n\022initialPhaseOption\030\n \001(\t\"\177\n\rHologramR"
    "eply\022\030\n\020hologramDataSize\030\001 \001(\r\022\024\n\014hologr"
    "amData\030\002 \001(\014\022\027\n\017ReconstDataSize\030\003 \001(\r\022\023\n"
    "\013ReconstData\030\004 \001(\014\022\020\n\010duration\030\005 \001(\r2\271\002\n"
    "\007Greeter\022@\n\010SayHello\022\031.hololibgrpc.Hello"
    "Request\032\027.hololibgrpc.HelloReply\"\000\022E\n\rSa"
    "yHelloAgain\022\031.hololibgrpc.HelloRequest\032\027"
    ".hololibgrpc.HelloReply\"\000\022M\n\017ComputeHolo"
    "gram\022\034.hololibgrpc.HologramRequest\032\032.hol"
    "olibgrpc.HologramReply\"\000\022V\n\026ComputeHolog"
    "ram_stream\022\034.hololibgrpc.HologramRequest"
    "\032\032.hololibgrpc.HologramReply\"\0000\001b\006proto3"
};
static ::absl::once_flag descriptor_table_hololib_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_hololib_2eproto = {
    false,
    false,
    800,
    descriptor_table_protodef_hololib_2eproto,
    "hololib.proto",
    &descriptor_table_hololib_2eproto_once,
    nullptr,
    0,
    4,
    schemas,
    file_default_instances,
    TableStruct_hololib_2eproto::offsets,
    file_level_metadata_hololib_2eproto,
    file_level_enum_descriptors_hololib_2eproto,
    file_level_service_descriptors_hololib_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_hololib_2eproto_getter() {
  return &descriptor_table_hololib_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_hololib_2eproto(&descriptor_table_hololib_2eproto);
namespace hololibgrpc {
// ===================================================================

class HelloRequest::_Internal {
 public:
};

HelloRequest::HelloRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hololibgrpc.HelloRequest)
}
HelloRequest::HelloRequest(const HelloRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HelloRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:hololibgrpc.HelloRequest)
}

inline void HelloRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HelloRequest::~HelloRequest() {
  // @@protoc_insertion_point(destructor:hololibgrpc.HelloRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HelloRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void HelloRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HelloRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hololibgrpc.HelloRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HelloRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hololibgrpc.HelloRequest.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* HelloRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hololibgrpc.HelloRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "hololibgrpc.HelloRequest.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hololibgrpc.HelloRequest)
  return target;
}

::size_t HelloRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hololibgrpc.HelloRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HelloRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HelloRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HelloRequest::GetClassData() const { return &_class_data_; }


void HelloRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HelloRequest*>(&to_msg);
  auto& from = static_cast<const HelloRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hololibgrpc.HelloRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HelloRequest::CopyFrom(const HelloRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hololibgrpc.HelloRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelloRequest::IsInitialized() const {
  return true;
}

void HelloRequest::InternalSwap(HelloRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata HelloRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hololib_2eproto_getter, &descriptor_table_hololib_2eproto_once,
      file_level_metadata_hololib_2eproto[0]);
}
// ===================================================================

class HelloReply::_Internal {
 public:
};

HelloReply::HelloReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hololibgrpc.HelloReply)
}
HelloReply::HelloReply(const HelloReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HelloReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:hololibgrpc.HelloReply)
}

inline void HelloReply::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.message_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HelloReply::~HelloReply() {
  // @@protoc_insertion_point(destructor:hololibgrpc.HelloReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HelloReply::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void HelloReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HelloReply::Clear() {
// @@protoc_insertion_point(message_clear_start:hololibgrpc.HelloReply)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HelloReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hololibgrpc.HelloReply.message"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* HelloReply::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hololibgrpc.HelloReply)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    const std::string& _s = this->_internal_message();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "hololibgrpc.HelloReply.message");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hololibgrpc.HelloReply)
  return target;
}

::size_t HelloReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hololibgrpc.HelloReply)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_message());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HelloReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HelloReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HelloReply::GetClassData() const { return &_class_data_; }


void HelloReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HelloReply*>(&to_msg);
  auto& from = static_cast<const HelloReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hololibgrpc.HelloReply)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HelloReply::CopyFrom(const HelloReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hololibgrpc.HelloReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelloReply::IsInitialized() const {
  return true;
}

void HelloReply::InternalSwap(HelloReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, lhs_arena,
                                       &other->_impl_.message_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata HelloReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hololib_2eproto_getter, &descriptor_table_hololib_2eproto_once,
      file_level_metadata_hololib_2eproto[1]);
}
// ===================================================================

class HologramRequest::_Internal {
 public:
};

HologramRequest::HologramRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hololibgrpc.HologramRequest)
}
HologramRequest::HologramRequest(const HologramRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HologramRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.meshdata_) {}

    , decltype(_impl_.texturedata_) {}

    , decltype(_impl_.shadingoption_) {}

    , decltype(_impl_.textureoption_) {}

    , decltype(_impl_.wavelengthoption_) {}

    , decltype(_impl_.pixelsizeoption_) {}

    , decltype(_impl_.numofpixelsoption_) {}

    , decltype(_impl_.initialphaseoption_) {}

    , decltype(_impl_.meshdatasize_) {}

    , decltype(_impl_.texturedatasize_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.meshdata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.meshdata_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_meshdata().empty()) {
    _this->_impl_.meshdata_.Set(from._internal_meshdata(), _this->GetArenaForAllocation());
  }
  _impl_.texturedata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.texturedata_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_texturedata().empty()) {
    _this->_impl_.texturedata_.Set(from._internal_texturedata(), _this->GetArenaForAllocation());
  }
  _impl_.shadingoption_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.shadingoption_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_shadingoption().empty()) {
    _this->_impl_.shadingoption_.Set(from._internal_shadingoption(), _this->GetArenaForAllocation());
  }
  _impl_.textureoption_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.textureoption_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_textureoption().empty()) {
    _this->_impl_.textureoption_.Set(from._internal_textureoption(), _this->GetArenaForAllocation());
  }
  _impl_.wavelengthoption_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.wavelengthoption_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_wavelengthoption().empty()) {
    _this->_impl_.wavelengthoption_.Set(from._internal_wavelengthoption(), _this->GetArenaForAllocation());
  }
  _impl_.pixelsizeoption_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.pixelsizeoption_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pixelsizeoption().empty()) {
    _this->_impl_.pixelsizeoption_.Set(from._internal_pixelsizeoption(), _this->GetArenaForAllocation());
  }
  _impl_.numofpixelsoption_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.numofpixelsoption_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_numofpixelsoption().empty()) {
    _this->_impl_.numofpixelsoption_.Set(from._internal_numofpixelsoption(), _this->GetArenaForAllocation());
  }
  _impl_.initialphaseoption_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.initialphaseoption_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_initialphaseoption().empty()) {
    _this->_impl_.initialphaseoption_.Set(from._internal_initialphaseoption(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.meshdatasize_, &from._impl_.meshdatasize_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.texturedatasize_) -
    reinterpret_cast<char*>(&_impl_.meshdatasize_)) + sizeof(_impl_.texturedatasize_));
  // @@protoc_insertion_point(copy_constructor:hololibgrpc.HologramRequest)
}

inline void HologramRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.meshdata_) {}

    , decltype(_impl_.texturedata_) {}

    , decltype(_impl_.shadingoption_) {}

    , decltype(_impl_.textureoption_) {}

    , decltype(_impl_.wavelengthoption_) {}

    , decltype(_impl_.pixelsizeoption_) {}

    , decltype(_impl_.numofpixelsoption_) {}

    , decltype(_impl_.initialphaseoption_) {}

    , decltype(_impl_.meshdatasize_) { 0u }

    , decltype(_impl_.texturedatasize_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.meshdata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.meshdata_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.texturedata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.texturedata_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.shadingoption_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.shadingoption_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.textureoption_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.textureoption_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.wavelengthoption_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.wavelengthoption_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pixelsizeoption_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.pixelsizeoption_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.numofpixelsoption_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.numofpixelsoption_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.initialphaseoption_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.initialphaseoption_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HologramRequest::~HologramRequest() {
  // @@protoc_insertion_point(destructor:hololibgrpc.HologramRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HologramRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.meshdata_.Destroy();
  _impl_.texturedata_.Destroy();
  _impl_.shadingoption_.Destroy();
  _impl_.textureoption_.Destroy();
  _impl_.wavelengthoption_.Destroy();
  _impl_.pixelsizeoption_.Destroy();
  _impl_.numofpixelsoption_.Destroy();
  _impl_.initialphaseoption_.Destroy();
}

void HologramRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HologramRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hololibgrpc.HologramRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.meshdata_.ClearToEmpty();
  _impl_.texturedata_.ClearToEmpty();
  _impl_.shadingoption_.ClearToEmpty();
  _impl_.textureoption_.ClearToEmpty();
  _impl_.wavelengthoption_.ClearToEmpty();
  _impl_.pixelsizeoption_.ClearToEmpty();
  _impl_.numofpixelsoption_.ClearToEmpty();
  _impl_.initialphaseoption_.ClearToEmpty();
  ::memset(&_impl_.meshdatasize_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.texturedatasize_) -
      reinterpret_cast<char*>(&_impl_.meshdatasize_)) + sizeof(_impl_.texturedatasize_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HologramRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 meshDataSize = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.meshdatasize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes meshData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_meshdata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 textureDataSize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.texturedatasize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes textureData = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_texturedata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string shadingOption = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_shadingoption();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hololibgrpc.HologramRequest.shadingOption"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string textureOption = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_textureoption();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hololibgrpc.HologramRequest.textureOption"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string wavelengthOption = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_wavelengthoption();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hololibgrpc.HologramRequest.wavelengthOption"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string pixelSizeOption = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_pixelsizeoption();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hololibgrpc.HologramRequest.pixelSizeOption"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string numOfPixelsOption = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_numofpixelsoption();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hololibgrpc.HologramRequest.numOfPixelsOption"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string initialPhaseOption = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_initialphaseoption();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hololibgrpc.HologramRequest.initialPhaseOption"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* HologramRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hololibgrpc.HologramRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 meshDataSize = 1;
  if (this->_internal_meshdatasize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_meshdatasize(), target);
  }

  // bytes meshData = 2;
  if (!this->_internal_meshdata().empty()) {
    const std::string& _s = this->_internal_meshdata();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // uint32 textureDataSize = 3;
  if (this->_internal_texturedatasize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_texturedatasize(), target);
  }

  // bytes textureData = 4;
  if (!this->_internal_texturedata().empty()) {
    const std::string& _s = this->_internal_texturedata();
    target = stream->WriteBytesMaybeAliased(4, _s, target);
  }

  // string shadingOption = 5;
  if (!this->_internal_shadingoption().empty()) {
    const std::string& _s = this->_internal_shadingoption();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "hololibgrpc.HologramRequest.shadingOption");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string textureOption = 6;
  if (!this->_internal_textureoption().empty()) {
    const std::string& _s = this->_internal_textureoption();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "hololibgrpc.HologramRequest.textureOption");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // string wavelengthOption = 7;
  if (!this->_internal_wavelengthoption().empty()) {
    const std::string& _s = this->_internal_wavelengthoption();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "hololibgrpc.HologramRequest.wavelengthOption");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // string pixelSizeOption = 8;
  if (!this->_internal_pixelsizeoption().empty()) {
    const std::string& _s = this->_internal_pixelsizeoption();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "hololibgrpc.HologramRequest.pixelSizeOption");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // string numOfPixelsOption = 9;
  if (!this->_internal_numofpixelsoption().empty()) {
    const std::string& _s = this->_internal_numofpixelsoption();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "hololibgrpc.HologramRequest.numOfPixelsOption");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // string initialPhaseOption = 10;
  if (!this->_internal_initialphaseoption().empty()) {
    const std::string& _s = this->_internal_initialphaseoption();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "hololibgrpc.HologramRequest.initialPhaseOption");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hololibgrpc.HologramRequest)
  return target;
}

::size_t HologramRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hololibgrpc.HologramRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes meshData = 2;
  if (!this->_internal_meshdata().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_meshdata());
  }

  // bytes textureData = 4;
  if (!this->_internal_texturedata().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_texturedata());
  }

  // string shadingOption = 5;
  if (!this->_internal_shadingoption().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_shadingoption());
  }

  // string textureOption = 6;
  if (!this->_internal_textureoption().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_textureoption());
  }

  // string wavelengthOption = 7;
  if (!this->_internal_wavelengthoption().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_wavelengthoption());
  }

  // string pixelSizeOption = 8;
  if (!this->_internal_pixelsizeoption().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_pixelsizeoption());
  }

  // string numOfPixelsOption = 9;
  if (!this->_internal_numofpixelsoption().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_numofpixelsoption());
  }

  // string initialPhaseOption = 10;
  if (!this->_internal_initialphaseoption().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_initialphaseoption());
  }

  // uint32 meshDataSize = 1;
  if (this->_internal_meshdatasize() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_meshdatasize());
  }

  // uint32 textureDataSize = 3;
  if (this->_internal_texturedatasize() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_texturedatasize());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HologramRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HologramRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HologramRequest::GetClassData() const { return &_class_data_; }


void HologramRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HologramRequest*>(&to_msg);
  auto& from = static_cast<const HologramRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hololibgrpc.HologramRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_meshdata().empty()) {
    _this->_internal_set_meshdata(from._internal_meshdata());
  }
  if (!from._internal_texturedata().empty()) {
    _this->_internal_set_texturedata(from._internal_texturedata());
  }
  if (!from._internal_shadingoption().empty()) {
    _this->_internal_set_shadingoption(from._internal_shadingoption());
  }
  if (!from._internal_textureoption().empty()) {
    _this->_internal_set_textureoption(from._internal_textureoption());
  }
  if (!from._internal_wavelengthoption().empty()) {
    _this->_internal_set_wavelengthoption(from._internal_wavelengthoption());
  }
  if (!from._internal_pixelsizeoption().empty()) {
    _this->_internal_set_pixelsizeoption(from._internal_pixelsizeoption());
  }
  if (!from._internal_numofpixelsoption().empty()) {
    _this->_internal_set_numofpixelsoption(from._internal_numofpixelsoption());
  }
  if (!from._internal_initialphaseoption().empty()) {
    _this->_internal_set_initialphaseoption(from._internal_initialphaseoption());
  }
  if (from._internal_meshdatasize() != 0) {
    _this->_internal_set_meshdatasize(from._internal_meshdatasize());
  }
  if (from._internal_texturedatasize() != 0) {
    _this->_internal_set_texturedatasize(from._internal_texturedatasize());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HologramRequest::CopyFrom(const HologramRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hololibgrpc.HologramRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HologramRequest::IsInitialized() const {
  return true;
}

void HologramRequest::InternalSwap(HologramRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.meshdata_, lhs_arena,
                                       &other->_impl_.meshdata_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.texturedata_, lhs_arena,
                                       &other->_impl_.texturedata_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.shadingoption_, lhs_arena,
                                       &other->_impl_.shadingoption_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.textureoption_, lhs_arena,
                                       &other->_impl_.textureoption_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.wavelengthoption_, lhs_arena,
                                       &other->_impl_.wavelengthoption_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.pixelsizeoption_, lhs_arena,
                                       &other->_impl_.pixelsizeoption_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.numofpixelsoption_, lhs_arena,
                                       &other->_impl_.numofpixelsoption_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.initialphaseoption_, lhs_arena,
                                       &other->_impl_.initialphaseoption_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HologramRequest, _impl_.texturedatasize_)
      + sizeof(HologramRequest::_impl_.texturedatasize_)
      - PROTOBUF_FIELD_OFFSET(HologramRequest, _impl_.meshdatasize_)>(
          reinterpret_cast<char*>(&_impl_.meshdatasize_),
          reinterpret_cast<char*>(&other->_impl_.meshdatasize_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HologramRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hololib_2eproto_getter, &descriptor_table_hololib_2eproto_once,
      file_level_metadata_hololib_2eproto[2]);
}
// ===================================================================

class HologramReply::_Internal {
 public:
};

HologramReply::HologramReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hololibgrpc.HologramReply)
}
HologramReply::HologramReply(const HologramReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HologramReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hologramdata_) {}

    , decltype(_impl_.reconstdata_) {}

    , decltype(_impl_.hologramdatasize_) {}

    , decltype(_impl_.reconstdatasize_) {}

    , decltype(_impl_.duration_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.hologramdata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hologramdata_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hologramdata().empty()) {
    _this->_impl_.hologramdata_.Set(from._internal_hologramdata(), _this->GetArenaForAllocation());
  }
  _impl_.reconstdata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.reconstdata_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reconstdata().empty()) {
    _this->_impl_.reconstdata_.Set(from._internal_reconstdata(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.hologramdatasize_, &from._impl_.hologramdatasize_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.duration_) -
    reinterpret_cast<char*>(&_impl_.hologramdatasize_)) + sizeof(_impl_.duration_));
  // @@protoc_insertion_point(copy_constructor:hololibgrpc.HologramReply)
}

inline void HologramReply::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.hologramdata_) {}

    , decltype(_impl_.reconstdata_) {}

    , decltype(_impl_.hologramdatasize_) { 0u }

    , decltype(_impl_.reconstdatasize_) { 0u }

    , decltype(_impl_.duration_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.hologramdata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hologramdata_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.reconstdata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.reconstdata_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HologramReply::~HologramReply() {
  // @@protoc_insertion_point(destructor:hololibgrpc.HologramReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HologramReply::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hologramdata_.Destroy();
  _impl_.reconstdata_.Destroy();
}

void HologramReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HologramReply::Clear() {
// @@protoc_insertion_point(message_clear_start:hololibgrpc.HologramReply)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hologramdata_.ClearToEmpty();
  _impl_.reconstdata_.ClearToEmpty();
  ::memset(&_impl_.hologramdatasize_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.duration_) -
      reinterpret_cast<char*>(&_impl_.hologramdatasize_)) + sizeof(_impl_.duration_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HologramReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 hologramDataSize = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.hologramdatasize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes hologramData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_hologramdata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 ReconstDataSize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.reconstdatasize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes ReconstData = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_reconstdata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 duration = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* HologramReply::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hololibgrpc.HologramReply)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 hologramDataSize = 1;
  if (this->_internal_hologramdatasize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_hologramdatasize(), target);
  }

  // bytes hologramData = 2;
  if (!this->_internal_hologramdata().empty()) {
    const std::string& _s = this->_internal_hologramdata();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // uint32 ReconstDataSize = 3;
  if (this->_internal_reconstdatasize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_reconstdatasize(), target);
  }

  // bytes ReconstData = 4;
  if (!this->_internal_reconstdata().empty()) {
    const std::string& _s = this->_internal_reconstdata();
    target = stream->WriteBytesMaybeAliased(4, _s, target);
  }

  // uint32 duration = 5;
  if (this->_internal_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hololibgrpc.HologramReply)
  return target;
}

::size_t HologramReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hololibgrpc.HologramReply)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes hologramData = 2;
  if (!this->_internal_hologramdata().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_hologramdata());
  }

  // bytes ReconstData = 4;
  if (!this->_internal_reconstdata().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_reconstdata());
  }

  // uint32 hologramDataSize = 1;
  if (this->_internal_hologramdatasize() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_hologramdatasize());
  }

  // uint32 ReconstDataSize = 3;
  if (this->_internal_reconstdatasize() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_reconstdatasize());
  }

  // uint32 duration = 5;
  if (this->_internal_duration() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_duration());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HologramReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HologramReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HologramReply::GetClassData() const { return &_class_data_; }


void HologramReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HologramReply*>(&to_msg);
  auto& from = static_cast<const HologramReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hololibgrpc.HologramReply)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hologramdata().empty()) {
    _this->_internal_set_hologramdata(from._internal_hologramdata());
  }
  if (!from._internal_reconstdata().empty()) {
    _this->_internal_set_reconstdata(from._internal_reconstdata());
  }
  if (from._internal_hologramdatasize() != 0) {
    _this->_internal_set_hologramdatasize(from._internal_hologramdatasize());
  }
  if (from._internal_reconstdatasize() != 0) {
    _this->_internal_set_reconstdatasize(from._internal_reconstdatasize());
  }
  if (from._internal_duration() != 0) {
    _this->_internal_set_duration(from._internal_duration());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HologramReply::CopyFrom(const HologramReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hololibgrpc.HologramReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HologramReply::IsInitialized() const {
  return true;
}

void HologramReply::InternalSwap(HologramReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hologramdata_, lhs_arena,
                                       &other->_impl_.hologramdata_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.reconstdata_, lhs_arena,
                                       &other->_impl_.reconstdata_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HologramReply, _impl_.duration_)
      + sizeof(HologramReply::_impl_.duration_)
      - PROTOBUF_FIELD_OFFSET(HologramReply, _impl_.hologramdatasize_)>(
          reinterpret_cast<char*>(&_impl_.hologramdatasize_),
          reinterpret_cast<char*>(&other->_impl_.hologramdatasize_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HologramReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hololib_2eproto_getter, &descriptor_table_hololib_2eproto_once,
      file_level_metadata_hololib_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace hololibgrpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::hololibgrpc::HelloRequest*
Arena::CreateMaybeMessage< ::hololibgrpc::HelloRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hololibgrpc::HelloRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hololibgrpc::HelloReply*
Arena::CreateMaybeMessage< ::hololibgrpc::HelloReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hololibgrpc::HelloReply >(arena);
}
template<> PROTOBUF_NOINLINE ::hololibgrpc::HologramRequest*
Arena::CreateMaybeMessage< ::hololibgrpc::HologramRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hololibgrpc::HologramRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hololibgrpc::HologramReply*
Arena::CreateMaybeMessage< ::hololibgrpc::HologramReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hololibgrpc::HologramReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
