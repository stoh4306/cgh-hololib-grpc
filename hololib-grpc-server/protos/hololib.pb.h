// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hololib.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_hololib_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_hololib_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_hololib_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_hololib_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_hololib_2eproto;
namespace hololibgrpc {
class HelloReply;
struct HelloReplyDefaultTypeInternal;
extern HelloReplyDefaultTypeInternal _HelloReply_default_instance_;
class HelloRequest;
struct HelloRequestDefaultTypeInternal;
extern HelloRequestDefaultTypeInternal _HelloRequest_default_instance_;
class HologramReply;
struct HologramReplyDefaultTypeInternal;
extern HologramReplyDefaultTypeInternal _HologramReply_default_instance_;
class HologramRequest;
struct HologramRequestDefaultTypeInternal;
extern HologramRequestDefaultTypeInternal _HologramRequest_default_instance_;
}  // namespace hololibgrpc
PROTOBUF_NAMESPACE_OPEN
template <>
::hololibgrpc::HelloReply* Arena::CreateMaybeMessage<::hololibgrpc::HelloReply>(Arena*);
template <>
::hololibgrpc::HelloRequest* Arena::CreateMaybeMessage<::hololibgrpc::HelloRequest>(Arena*);
template <>
::hololibgrpc::HologramReply* Arena::CreateMaybeMessage<::hololibgrpc::HologramReply>(Arena*);
template <>
::hololibgrpc::HologramRequest* Arena::CreateMaybeMessage<::hololibgrpc::HologramRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace hololibgrpc {

// ===================================================================


// -------------------------------------------------------------------

class HelloRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hololibgrpc.HelloRequest) */ {
 public:
  inline HelloRequest() : HelloRequest(nullptr) {}
  ~HelloRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR HelloRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HelloRequest(const HelloRequest& from);
  HelloRequest(HelloRequest&& from) noexcept
    : HelloRequest() {
    *this = ::std::move(from);
  }

  inline HelloRequest& operator=(const HelloRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HelloRequest& operator=(HelloRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HelloRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HelloRequest* internal_default_instance() {
    return reinterpret_cast<const HelloRequest*>(
               &_HelloRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HelloRequest& a, HelloRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HelloRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HelloRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HelloRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HelloRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HelloRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HelloRequest& from) {
    HelloRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HelloRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "hololibgrpc.HelloRequest";
  }
  protected:
  explicit HelloRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:hololibgrpc.HelloRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hololib_2eproto;
};// -------------------------------------------------------------------

class HelloReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hololibgrpc.HelloReply) */ {
 public:
  inline HelloReply() : HelloReply(nullptr) {}
  ~HelloReply() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR HelloReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HelloReply(const HelloReply& from);
  HelloReply(HelloReply&& from) noexcept
    : HelloReply() {
    *this = ::std::move(from);
  }

  inline HelloReply& operator=(const HelloReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline HelloReply& operator=(HelloReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HelloReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const HelloReply* internal_default_instance() {
    return reinterpret_cast<const HelloReply*>(
               &_HelloReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HelloReply& a, HelloReply& b) {
    a.Swap(&b);
  }
  inline void Swap(HelloReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HelloReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HelloReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HelloReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HelloReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HelloReply& from) {
    HelloReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HelloReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "hololibgrpc.HelloReply";
  }
  protected:
  explicit HelloReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1;
  void clear_message() ;
  const std::string& message() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* ptr);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // @@protoc_insertion_point(class_scope:hololibgrpc.HelloReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hololib_2eproto;
};// -------------------------------------------------------------------

class HologramRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hololibgrpc.HologramRequest) */ {
 public:
  inline HologramRequest() : HologramRequest(nullptr) {}
  ~HologramRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR HologramRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HologramRequest(const HologramRequest& from);
  HologramRequest(HologramRequest&& from) noexcept
    : HologramRequest() {
    *this = ::std::move(from);
  }

  inline HologramRequest& operator=(const HologramRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HologramRequest& operator=(HologramRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HologramRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HologramRequest* internal_default_instance() {
    return reinterpret_cast<const HologramRequest*>(
               &_HologramRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HologramRequest& a, HologramRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HologramRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HologramRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HologramRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HologramRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HologramRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HologramRequest& from) {
    HologramRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HologramRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "hololibgrpc.HologramRequest";
  }
  protected:
  explicit HologramRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMeshDataFieldNumber = 2,
    kTextureDataFieldNumber = 4,
    kShadingOptionFieldNumber = 5,
    kTextureOptionFieldNumber = 6,
    kWavelengthOptionFieldNumber = 7,
    kPixelSizeOptionFieldNumber = 8,
    kNumOfPixelsOptionFieldNumber = 9,
    kInitialPhaseOptionFieldNumber = 10,
    kMeshDataSizeFieldNumber = 1,
    kTextureDataSizeFieldNumber = 3,
  };
  // bytes meshData = 2;
  void clear_meshdata() ;
  const std::string& meshdata() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_meshdata(Arg_&& arg, Args_... args);
  std::string* mutable_meshdata();
  PROTOBUF_NODISCARD std::string* release_meshdata();
  void set_allocated_meshdata(std::string* ptr);

  private:
  const std::string& _internal_meshdata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_meshdata(
      const std::string& value);
  std::string* _internal_mutable_meshdata();

  public:
  // bytes textureData = 4;
  void clear_texturedata() ;
  const std::string& texturedata() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_texturedata(Arg_&& arg, Args_... args);
  std::string* mutable_texturedata();
  PROTOBUF_NODISCARD std::string* release_texturedata();
  void set_allocated_texturedata(std::string* ptr);

  private:
  const std::string& _internal_texturedata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_texturedata(
      const std::string& value);
  std::string* _internal_mutable_texturedata();

  public:
  // string shadingOption = 5;
  void clear_shadingoption() ;
  const std::string& shadingoption() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_shadingoption(Arg_&& arg, Args_... args);
  std::string* mutable_shadingoption();
  PROTOBUF_NODISCARD std::string* release_shadingoption();
  void set_allocated_shadingoption(std::string* ptr);

  private:
  const std::string& _internal_shadingoption() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shadingoption(
      const std::string& value);
  std::string* _internal_mutable_shadingoption();

  public:
  // string textureOption = 6;
  void clear_textureoption() ;
  const std::string& textureoption() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_textureoption(Arg_&& arg, Args_... args);
  std::string* mutable_textureoption();
  PROTOBUF_NODISCARD std::string* release_textureoption();
  void set_allocated_textureoption(std::string* ptr);

  private:
  const std::string& _internal_textureoption() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_textureoption(
      const std::string& value);
  std::string* _internal_mutable_textureoption();

  public:
  // string wavelengthOption = 7;
  void clear_wavelengthoption() ;
  const std::string& wavelengthoption() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_wavelengthoption(Arg_&& arg, Args_... args);
  std::string* mutable_wavelengthoption();
  PROTOBUF_NODISCARD std::string* release_wavelengthoption();
  void set_allocated_wavelengthoption(std::string* ptr);

  private:
  const std::string& _internal_wavelengthoption() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_wavelengthoption(
      const std::string& value);
  std::string* _internal_mutable_wavelengthoption();

  public:
  // string pixelSizeOption = 8;
  void clear_pixelsizeoption() ;
  const std::string& pixelsizeoption() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_pixelsizeoption(Arg_&& arg, Args_... args);
  std::string* mutable_pixelsizeoption();
  PROTOBUF_NODISCARD std::string* release_pixelsizeoption();
  void set_allocated_pixelsizeoption(std::string* ptr);

  private:
  const std::string& _internal_pixelsizeoption() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pixelsizeoption(
      const std::string& value);
  std::string* _internal_mutable_pixelsizeoption();

  public:
  // string numOfPixelsOption = 9;
  void clear_numofpixelsoption() ;
  const std::string& numofpixelsoption() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_numofpixelsoption(Arg_&& arg, Args_... args);
  std::string* mutable_numofpixelsoption();
  PROTOBUF_NODISCARD std::string* release_numofpixelsoption();
  void set_allocated_numofpixelsoption(std::string* ptr);

  private:
  const std::string& _internal_numofpixelsoption() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_numofpixelsoption(
      const std::string& value);
  std::string* _internal_mutable_numofpixelsoption();

  public:
  // string initialPhaseOption = 10;
  void clear_initialphaseoption() ;
  const std::string& initialphaseoption() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_initialphaseoption(Arg_&& arg, Args_... args);
  std::string* mutable_initialphaseoption();
  PROTOBUF_NODISCARD std::string* release_initialphaseoption();
  void set_allocated_initialphaseoption(std::string* ptr);

  private:
  const std::string& _internal_initialphaseoption() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_initialphaseoption(
      const std::string& value);
  std::string* _internal_mutable_initialphaseoption();

  public:
  // uint32 meshDataSize = 1;
  void clear_meshdatasize() ;
  ::uint32_t meshdatasize() const;
  void set_meshdatasize(::uint32_t value);

  private:
  ::uint32_t _internal_meshdatasize() const;
  void _internal_set_meshdatasize(::uint32_t value);

  public:
  // uint32 textureDataSize = 3;
  void clear_texturedatasize() ;
  ::uint32_t texturedatasize() const;
  void set_texturedatasize(::uint32_t value);

  private:
  ::uint32_t _internal_texturedatasize() const;
  void _internal_set_texturedatasize(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:hololibgrpc.HologramRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr meshdata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr texturedata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shadingoption_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr textureoption_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wavelengthoption_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pixelsizeoption_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr numofpixelsoption_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr initialphaseoption_;
    ::uint32_t meshdatasize_;
    ::uint32_t texturedatasize_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hololib_2eproto;
};// -------------------------------------------------------------------

class HologramReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hololibgrpc.HologramReply) */ {
 public:
  inline HologramReply() : HologramReply(nullptr) {}
  ~HologramReply() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR HologramReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HologramReply(const HologramReply& from);
  HologramReply(HologramReply&& from) noexcept
    : HologramReply() {
    *this = ::std::move(from);
  }

  inline HologramReply& operator=(const HologramReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline HologramReply& operator=(HologramReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HologramReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const HologramReply* internal_default_instance() {
    return reinterpret_cast<const HologramReply*>(
               &_HologramReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(HologramReply& a, HologramReply& b) {
    a.Swap(&b);
  }
  inline void Swap(HologramReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HologramReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HologramReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HologramReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HologramReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HologramReply& from) {
    HologramReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HologramReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "hololibgrpc.HologramReply";
  }
  protected:
  explicit HologramReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHologramDataFieldNumber = 2,
    kReconstDataFieldNumber = 4,
    kHologramDataSizeFieldNumber = 1,
    kReconstDataSizeFieldNumber = 3,
    kDurationFieldNumber = 5,
  };
  // bytes hologramData = 2;
  void clear_hologramdata() ;
  const std::string& hologramdata() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hologramdata(Arg_&& arg, Args_... args);
  std::string* mutable_hologramdata();
  PROTOBUF_NODISCARD std::string* release_hologramdata();
  void set_allocated_hologramdata(std::string* ptr);

  private:
  const std::string& _internal_hologramdata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hologramdata(
      const std::string& value);
  std::string* _internal_mutable_hologramdata();

  public:
  // bytes ReconstData = 4;
  void clear_reconstdata() ;
  const std::string& reconstdata() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reconstdata(Arg_&& arg, Args_... args);
  std::string* mutable_reconstdata();
  PROTOBUF_NODISCARD std::string* release_reconstdata();
  void set_allocated_reconstdata(std::string* ptr);

  private:
  const std::string& _internal_reconstdata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reconstdata(
      const std::string& value);
  std::string* _internal_mutable_reconstdata();

  public:
  // uint32 hologramDataSize = 1;
  void clear_hologramdatasize() ;
  ::uint32_t hologramdatasize() const;
  void set_hologramdatasize(::uint32_t value);

  private:
  ::uint32_t _internal_hologramdatasize() const;
  void _internal_set_hologramdatasize(::uint32_t value);

  public:
  // uint32 ReconstDataSize = 3;
  void clear_reconstdatasize() ;
  ::uint32_t reconstdatasize() const;
  void set_reconstdatasize(::uint32_t value);

  private:
  ::uint32_t _internal_reconstdatasize() const;
  void _internal_set_reconstdatasize(::uint32_t value);

  public:
  // uint32 duration = 5;
  void clear_duration() ;
  ::uint32_t duration() const;
  void set_duration(::uint32_t value);

  private:
  ::uint32_t _internal_duration() const;
  void _internal_set_duration(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:hololibgrpc.HologramReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hologramdata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reconstdata_;
    ::uint32_t hologramdatasize_;
    ::uint32_t reconstdatasize_;
    ::uint32_t duration_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hololib_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// HelloRequest

// string name = 1;
inline void HelloRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& HelloRequest::name() const {
  // @@protoc_insertion_point(field_get:hololibgrpc.HelloRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HelloRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hololibgrpc.HelloRequest.name)
}
inline std::string* HelloRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:hololibgrpc.HelloRequest.name)
  return _s;
}
inline const std::string& HelloRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void HelloRequest::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* HelloRequest::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* HelloRequest::release_name() {
  // @@protoc_insertion_point(field_release:hololibgrpc.HelloRequest.name)
  return _impl_.name_.Release();
}
inline void HelloRequest::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hololibgrpc.HelloRequest.name)
}

// -------------------------------------------------------------------

// HelloReply

// string message = 1;
inline void HelloReply::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& HelloReply::message() const {
  // @@protoc_insertion_point(field_get:hololibgrpc.HelloReply.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HelloReply::set_message(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hololibgrpc.HelloReply.message)
}
inline std::string* HelloReply::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:hololibgrpc.HelloReply.message)
  return _s;
}
inline const std::string& HelloReply::_internal_message() const {
  return _impl_.message_.Get();
}
inline void HelloReply::_internal_set_message(const std::string& value) {
  ;


  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* HelloReply::_internal_mutable_message() {
  ;
  return _impl_.message_.Mutable( GetArenaForAllocation());
}
inline std::string* HelloReply::release_message() {
  // @@protoc_insertion_point(field_release:hololibgrpc.HelloReply.message)
  return _impl_.message_.Release();
}
inline void HelloReply::set_allocated_message(std::string* value) {
  _impl_.message_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hololibgrpc.HelloReply.message)
}

// -------------------------------------------------------------------

// HologramRequest

// uint32 meshDataSize = 1;
inline void HologramRequest::clear_meshdatasize() {
  _impl_.meshdatasize_ = 0u;
}
inline ::uint32_t HologramRequest::meshdatasize() const {
  // @@protoc_insertion_point(field_get:hololibgrpc.HologramRequest.meshDataSize)
  return _internal_meshdatasize();
}
inline void HologramRequest::set_meshdatasize(::uint32_t value) {
  _internal_set_meshdatasize(value);
  // @@protoc_insertion_point(field_set:hololibgrpc.HologramRequest.meshDataSize)
}
inline ::uint32_t HologramRequest::_internal_meshdatasize() const {
  return _impl_.meshdatasize_;
}
inline void HologramRequest::_internal_set_meshdatasize(::uint32_t value) {
  ;
  _impl_.meshdatasize_ = value;
}

// bytes meshData = 2;
inline void HologramRequest::clear_meshdata() {
  _impl_.meshdata_.ClearToEmpty();
}
inline const std::string& HologramRequest::meshdata() const {
  // @@protoc_insertion_point(field_get:hololibgrpc.HologramRequest.meshData)
  return _internal_meshdata();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HologramRequest::set_meshdata(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.meshdata_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hololibgrpc.HologramRequest.meshData)
}
inline std::string* HologramRequest::mutable_meshdata() {
  std::string* _s = _internal_mutable_meshdata();
  // @@protoc_insertion_point(field_mutable:hololibgrpc.HologramRequest.meshData)
  return _s;
}
inline const std::string& HologramRequest::_internal_meshdata() const {
  return _impl_.meshdata_.Get();
}
inline void HologramRequest::_internal_set_meshdata(const std::string& value) {
  ;


  _impl_.meshdata_.Set(value, GetArenaForAllocation());
}
inline std::string* HologramRequest::_internal_mutable_meshdata() {
  ;
  return _impl_.meshdata_.Mutable( GetArenaForAllocation());
}
inline std::string* HologramRequest::release_meshdata() {
  // @@protoc_insertion_point(field_release:hololibgrpc.HologramRequest.meshData)
  return _impl_.meshdata_.Release();
}
inline void HologramRequest::set_allocated_meshdata(std::string* value) {
  _impl_.meshdata_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.meshdata_.IsDefault()) {
          _impl_.meshdata_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hololibgrpc.HologramRequest.meshData)
}

// uint32 textureDataSize = 3;
inline void HologramRequest::clear_texturedatasize() {
  _impl_.texturedatasize_ = 0u;
}
inline ::uint32_t HologramRequest::texturedatasize() const {
  // @@protoc_insertion_point(field_get:hololibgrpc.HologramRequest.textureDataSize)
  return _internal_texturedatasize();
}
inline void HologramRequest::set_texturedatasize(::uint32_t value) {
  _internal_set_texturedatasize(value);
  // @@protoc_insertion_point(field_set:hololibgrpc.HologramRequest.textureDataSize)
}
inline ::uint32_t HologramRequest::_internal_texturedatasize() const {
  return _impl_.texturedatasize_;
}
inline void HologramRequest::_internal_set_texturedatasize(::uint32_t value) {
  ;
  _impl_.texturedatasize_ = value;
}

// bytes textureData = 4;
inline void HologramRequest::clear_texturedata() {
  _impl_.texturedata_.ClearToEmpty();
}
inline const std::string& HologramRequest::texturedata() const {
  // @@protoc_insertion_point(field_get:hololibgrpc.HologramRequest.textureData)
  return _internal_texturedata();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HologramRequest::set_texturedata(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.texturedata_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hololibgrpc.HologramRequest.textureData)
}
inline std::string* HologramRequest::mutable_texturedata() {
  std::string* _s = _internal_mutable_texturedata();
  // @@protoc_insertion_point(field_mutable:hololibgrpc.HologramRequest.textureData)
  return _s;
}
inline const std::string& HologramRequest::_internal_texturedata() const {
  return _impl_.texturedata_.Get();
}
inline void HologramRequest::_internal_set_texturedata(const std::string& value) {
  ;


  _impl_.texturedata_.Set(value, GetArenaForAllocation());
}
inline std::string* HologramRequest::_internal_mutable_texturedata() {
  ;
  return _impl_.texturedata_.Mutable( GetArenaForAllocation());
}
inline std::string* HologramRequest::release_texturedata() {
  // @@protoc_insertion_point(field_release:hololibgrpc.HologramRequest.textureData)
  return _impl_.texturedata_.Release();
}
inline void HologramRequest::set_allocated_texturedata(std::string* value) {
  _impl_.texturedata_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.texturedata_.IsDefault()) {
          _impl_.texturedata_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hololibgrpc.HologramRequest.textureData)
}

// string shadingOption = 5;
inline void HologramRequest::clear_shadingoption() {
  _impl_.shadingoption_.ClearToEmpty();
}
inline const std::string& HologramRequest::shadingoption() const {
  // @@protoc_insertion_point(field_get:hololibgrpc.HologramRequest.shadingOption)
  return _internal_shadingoption();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HologramRequest::set_shadingoption(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.shadingoption_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hololibgrpc.HologramRequest.shadingOption)
}
inline std::string* HologramRequest::mutable_shadingoption() {
  std::string* _s = _internal_mutable_shadingoption();
  // @@protoc_insertion_point(field_mutable:hololibgrpc.HologramRequest.shadingOption)
  return _s;
}
inline const std::string& HologramRequest::_internal_shadingoption() const {
  return _impl_.shadingoption_.Get();
}
inline void HologramRequest::_internal_set_shadingoption(const std::string& value) {
  ;


  _impl_.shadingoption_.Set(value, GetArenaForAllocation());
}
inline std::string* HologramRequest::_internal_mutable_shadingoption() {
  ;
  return _impl_.shadingoption_.Mutable( GetArenaForAllocation());
}
inline std::string* HologramRequest::release_shadingoption() {
  // @@protoc_insertion_point(field_release:hololibgrpc.HologramRequest.shadingOption)
  return _impl_.shadingoption_.Release();
}
inline void HologramRequest::set_allocated_shadingoption(std::string* value) {
  _impl_.shadingoption_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.shadingoption_.IsDefault()) {
          _impl_.shadingoption_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hololibgrpc.HologramRequest.shadingOption)
}

// string textureOption = 6;
inline void HologramRequest::clear_textureoption() {
  _impl_.textureoption_.ClearToEmpty();
}
inline const std::string& HologramRequest::textureoption() const {
  // @@protoc_insertion_point(field_get:hololibgrpc.HologramRequest.textureOption)
  return _internal_textureoption();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HologramRequest::set_textureoption(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.textureoption_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hololibgrpc.HologramRequest.textureOption)
}
inline std::string* HologramRequest::mutable_textureoption() {
  std::string* _s = _internal_mutable_textureoption();
  // @@protoc_insertion_point(field_mutable:hololibgrpc.HologramRequest.textureOption)
  return _s;
}
inline const std::string& HologramRequest::_internal_textureoption() const {
  return _impl_.textureoption_.Get();
}
inline void HologramRequest::_internal_set_textureoption(const std::string& value) {
  ;


  _impl_.textureoption_.Set(value, GetArenaForAllocation());
}
inline std::string* HologramRequest::_internal_mutable_textureoption() {
  ;
  return _impl_.textureoption_.Mutable( GetArenaForAllocation());
}
inline std::string* HologramRequest::release_textureoption() {
  // @@protoc_insertion_point(field_release:hololibgrpc.HologramRequest.textureOption)
  return _impl_.textureoption_.Release();
}
inline void HologramRequest::set_allocated_textureoption(std::string* value) {
  _impl_.textureoption_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.textureoption_.IsDefault()) {
          _impl_.textureoption_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hololibgrpc.HologramRequest.textureOption)
}

// string wavelengthOption = 7;
inline void HologramRequest::clear_wavelengthoption() {
  _impl_.wavelengthoption_.ClearToEmpty();
}
inline const std::string& HologramRequest::wavelengthoption() const {
  // @@protoc_insertion_point(field_get:hololibgrpc.HologramRequest.wavelengthOption)
  return _internal_wavelengthoption();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HologramRequest::set_wavelengthoption(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.wavelengthoption_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hololibgrpc.HologramRequest.wavelengthOption)
}
inline std::string* HologramRequest::mutable_wavelengthoption() {
  std::string* _s = _internal_mutable_wavelengthoption();
  // @@protoc_insertion_point(field_mutable:hololibgrpc.HologramRequest.wavelengthOption)
  return _s;
}
inline const std::string& HologramRequest::_internal_wavelengthoption() const {
  return _impl_.wavelengthoption_.Get();
}
inline void HologramRequest::_internal_set_wavelengthoption(const std::string& value) {
  ;


  _impl_.wavelengthoption_.Set(value, GetArenaForAllocation());
}
inline std::string* HologramRequest::_internal_mutable_wavelengthoption() {
  ;
  return _impl_.wavelengthoption_.Mutable( GetArenaForAllocation());
}
inline std::string* HologramRequest::release_wavelengthoption() {
  // @@protoc_insertion_point(field_release:hololibgrpc.HologramRequest.wavelengthOption)
  return _impl_.wavelengthoption_.Release();
}
inline void HologramRequest::set_allocated_wavelengthoption(std::string* value) {
  _impl_.wavelengthoption_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.wavelengthoption_.IsDefault()) {
          _impl_.wavelengthoption_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hololibgrpc.HologramRequest.wavelengthOption)
}

// string pixelSizeOption = 8;
inline void HologramRequest::clear_pixelsizeoption() {
  _impl_.pixelsizeoption_.ClearToEmpty();
}
inline const std::string& HologramRequest::pixelsizeoption() const {
  // @@protoc_insertion_point(field_get:hololibgrpc.HologramRequest.pixelSizeOption)
  return _internal_pixelsizeoption();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HologramRequest::set_pixelsizeoption(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.pixelsizeoption_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hololibgrpc.HologramRequest.pixelSizeOption)
}
inline std::string* HologramRequest::mutable_pixelsizeoption() {
  std::string* _s = _internal_mutable_pixelsizeoption();
  // @@protoc_insertion_point(field_mutable:hololibgrpc.HologramRequest.pixelSizeOption)
  return _s;
}
inline const std::string& HologramRequest::_internal_pixelsizeoption() const {
  return _impl_.pixelsizeoption_.Get();
}
inline void HologramRequest::_internal_set_pixelsizeoption(const std::string& value) {
  ;


  _impl_.pixelsizeoption_.Set(value, GetArenaForAllocation());
}
inline std::string* HologramRequest::_internal_mutable_pixelsizeoption() {
  ;
  return _impl_.pixelsizeoption_.Mutable( GetArenaForAllocation());
}
inline std::string* HologramRequest::release_pixelsizeoption() {
  // @@protoc_insertion_point(field_release:hololibgrpc.HologramRequest.pixelSizeOption)
  return _impl_.pixelsizeoption_.Release();
}
inline void HologramRequest::set_allocated_pixelsizeoption(std::string* value) {
  _impl_.pixelsizeoption_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.pixelsizeoption_.IsDefault()) {
          _impl_.pixelsizeoption_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hololibgrpc.HologramRequest.pixelSizeOption)
}

// string numOfPixelsOption = 9;
inline void HologramRequest::clear_numofpixelsoption() {
  _impl_.numofpixelsoption_.ClearToEmpty();
}
inline const std::string& HologramRequest::numofpixelsoption() const {
  // @@protoc_insertion_point(field_get:hololibgrpc.HologramRequest.numOfPixelsOption)
  return _internal_numofpixelsoption();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HologramRequest::set_numofpixelsoption(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.numofpixelsoption_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hololibgrpc.HologramRequest.numOfPixelsOption)
}
inline std::string* HologramRequest::mutable_numofpixelsoption() {
  std::string* _s = _internal_mutable_numofpixelsoption();
  // @@protoc_insertion_point(field_mutable:hololibgrpc.HologramRequest.numOfPixelsOption)
  return _s;
}
inline const std::string& HologramRequest::_internal_numofpixelsoption() const {
  return _impl_.numofpixelsoption_.Get();
}
inline void HologramRequest::_internal_set_numofpixelsoption(const std::string& value) {
  ;


  _impl_.numofpixelsoption_.Set(value, GetArenaForAllocation());
}
inline std::string* HologramRequest::_internal_mutable_numofpixelsoption() {
  ;
  return _impl_.numofpixelsoption_.Mutable( GetArenaForAllocation());
}
inline std::string* HologramRequest::release_numofpixelsoption() {
  // @@protoc_insertion_point(field_release:hololibgrpc.HologramRequest.numOfPixelsOption)
  return _impl_.numofpixelsoption_.Release();
}
inline void HologramRequest::set_allocated_numofpixelsoption(std::string* value) {
  _impl_.numofpixelsoption_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.numofpixelsoption_.IsDefault()) {
          _impl_.numofpixelsoption_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hololibgrpc.HologramRequest.numOfPixelsOption)
}

// string initialPhaseOption = 10;
inline void HologramRequest::clear_initialphaseoption() {
  _impl_.initialphaseoption_.ClearToEmpty();
}
inline const std::string& HologramRequest::initialphaseoption() const {
  // @@protoc_insertion_point(field_get:hololibgrpc.HologramRequest.initialPhaseOption)
  return _internal_initialphaseoption();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HologramRequest::set_initialphaseoption(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.initialphaseoption_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hololibgrpc.HologramRequest.initialPhaseOption)
}
inline std::string* HologramRequest::mutable_initialphaseoption() {
  std::string* _s = _internal_mutable_initialphaseoption();
  // @@protoc_insertion_point(field_mutable:hololibgrpc.HologramRequest.initialPhaseOption)
  return _s;
}
inline const std::string& HologramRequest::_internal_initialphaseoption() const {
  return _impl_.initialphaseoption_.Get();
}
inline void HologramRequest::_internal_set_initialphaseoption(const std::string& value) {
  ;


  _impl_.initialphaseoption_.Set(value, GetArenaForAllocation());
}
inline std::string* HologramRequest::_internal_mutable_initialphaseoption() {
  ;
  return _impl_.initialphaseoption_.Mutable( GetArenaForAllocation());
}
inline std::string* HologramRequest::release_initialphaseoption() {
  // @@protoc_insertion_point(field_release:hololibgrpc.HologramRequest.initialPhaseOption)
  return _impl_.initialphaseoption_.Release();
}
inline void HologramRequest::set_allocated_initialphaseoption(std::string* value) {
  _impl_.initialphaseoption_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.initialphaseoption_.IsDefault()) {
          _impl_.initialphaseoption_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hololibgrpc.HologramRequest.initialPhaseOption)
}

// -------------------------------------------------------------------

// HologramReply

// uint32 hologramDataSize = 1;
inline void HologramReply::clear_hologramdatasize() {
  _impl_.hologramdatasize_ = 0u;
}
inline ::uint32_t HologramReply::hologramdatasize() const {
  // @@protoc_insertion_point(field_get:hololibgrpc.HologramReply.hologramDataSize)
  return _internal_hologramdatasize();
}
inline void HologramReply::set_hologramdatasize(::uint32_t value) {
  _internal_set_hologramdatasize(value);
  // @@protoc_insertion_point(field_set:hololibgrpc.HologramReply.hologramDataSize)
}
inline ::uint32_t HologramReply::_internal_hologramdatasize() const {
  return _impl_.hologramdatasize_;
}
inline void HologramReply::_internal_set_hologramdatasize(::uint32_t value) {
  ;
  _impl_.hologramdatasize_ = value;
}

// bytes hologramData = 2;
inline void HologramReply::clear_hologramdata() {
  _impl_.hologramdata_.ClearToEmpty();
}
inline const std::string& HologramReply::hologramdata() const {
  // @@protoc_insertion_point(field_get:hololibgrpc.HologramReply.hologramData)
  return _internal_hologramdata();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HologramReply::set_hologramdata(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.hologramdata_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hololibgrpc.HologramReply.hologramData)
}
inline std::string* HologramReply::mutable_hologramdata() {
  std::string* _s = _internal_mutable_hologramdata();
  // @@protoc_insertion_point(field_mutable:hololibgrpc.HologramReply.hologramData)
  return _s;
}
inline const std::string& HologramReply::_internal_hologramdata() const {
  return _impl_.hologramdata_.Get();
}
inline void HologramReply::_internal_set_hologramdata(const std::string& value) {
  ;


  _impl_.hologramdata_.Set(value, GetArenaForAllocation());
}
inline std::string* HologramReply::_internal_mutable_hologramdata() {
  ;
  return _impl_.hologramdata_.Mutable( GetArenaForAllocation());
}
inline std::string* HologramReply::release_hologramdata() {
  // @@protoc_insertion_point(field_release:hololibgrpc.HologramReply.hologramData)
  return _impl_.hologramdata_.Release();
}
inline void HologramReply::set_allocated_hologramdata(std::string* value) {
  _impl_.hologramdata_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.hologramdata_.IsDefault()) {
          _impl_.hologramdata_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hololibgrpc.HologramReply.hologramData)
}

// uint32 ReconstDataSize = 3;
inline void HologramReply::clear_reconstdatasize() {
  _impl_.reconstdatasize_ = 0u;
}
inline ::uint32_t HologramReply::reconstdatasize() const {
  // @@protoc_insertion_point(field_get:hololibgrpc.HologramReply.ReconstDataSize)
  return _internal_reconstdatasize();
}
inline void HologramReply::set_reconstdatasize(::uint32_t value) {
  _internal_set_reconstdatasize(value);
  // @@protoc_insertion_point(field_set:hololibgrpc.HologramReply.ReconstDataSize)
}
inline ::uint32_t HologramReply::_internal_reconstdatasize() const {
  return _impl_.reconstdatasize_;
}
inline void HologramReply::_internal_set_reconstdatasize(::uint32_t value) {
  ;
  _impl_.reconstdatasize_ = value;
}

// bytes ReconstData = 4;
inline void HologramReply::clear_reconstdata() {
  _impl_.reconstdata_.ClearToEmpty();
}
inline const std::string& HologramReply::reconstdata() const {
  // @@protoc_insertion_point(field_get:hololibgrpc.HologramReply.ReconstData)
  return _internal_reconstdata();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HologramReply::set_reconstdata(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.reconstdata_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hololibgrpc.HologramReply.ReconstData)
}
inline std::string* HologramReply::mutable_reconstdata() {
  std::string* _s = _internal_mutable_reconstdata();
  // @@protoc_insertion_point(field_mutable:hololibgrpc.HologramReply.ReconstData)
  return _s;
}
inline const std::string& HologramReply::_internal_reconstdata() const {
  return _impl_.reconstdata_.Get();
}
inline void HologramReply::_internal_set_reconstdata(const std::string& value) {
  ;


  _impl_.reconstdata_.Set(value, GetArenaForAllocation());
}
inline std::string* HologramReply::_internal_mutable_reconstdata() {
  ;
  return _impl_.reconstdata_.Mutable( GetArenaForAllocation());
}
inline std::string* HologramReply::release_reconstdata() {
  // @@protoc_insertion_point(field_release:hololibgrpc.HologramReply.ReconstData)
  return _impl_.reconstdata_.Release();
}
inline void HologramReply::set_allocated_reconstdata(std::string* value) {
  _impl_.reconstdata_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.reconstdata_.IsDefault()) {
          _impl_.reconstdata_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hololibgrpc.HologramReply.ReconstData)
}

// uint32 duration = 5;
inline void HologramReply::clear_duration() {
  _impl_.duration_ = 0u;
}
inline ::uint32_t HologramReply::duration() const {
  // @@protoc_insertion_point(field_get:hololibgrpc.HologramReply.duration)
  return _internal_duration();
}
inline void HologramReply::set_duration(::uint32_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:hololibgrpc.HologramReply.duration)
}
inline ::uint32_t HologramReply::_internal_duration() const {
  return _impl_.duration_;
}
inline void HologramReply::_internal_set_duration(::uint32_t value) {
  ;
  _impl_.duration_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace hololibgrpc


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_hololib_2eproto_2epb_2eh
